// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type datapathArpEntry struct {
	Macaddr     [6]uint8
	PortNo      uint32
	LastUpdated uint64
}

type datapathFdbEntry struct {
	PortNo      uint32
	LastUpdated uint64
}

type datapathFdbKey struct{ Macaddr [6]uint8 }

type datapathLpmNhIn4 struct {
	NhType uint8
	_      [3]byte
	Addr   uint32
}

type datapathNdKey struct{ Addr [4]uint32 }

type datapathPortConf struct {
	Macaddr    [6]uint8
	Isroutable uint8
	In4addr    uint32
}

type datapathRouteKeyIn4 struct {
	PrefixLen uint32
	Addr      uint32
}

// loadDatapath returns the embedded CollectionSpec for datapath.
func loadDatapath() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DatapathBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load datapath: %w", err)
	}

	return spec, err
}

// loadDatapathObjects loads datapath and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*datapathObjects
//	*datapathPrograms
//	*datapathMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDatapathObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDatapath()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// datapathSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type datapathSpecs struct {
	datapathProgramSpecs
	datapathMapSpecs
}

// datapathSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type datapathProgramSpecs struct {
	XdpBridgeIn *ebpf.ProgramSpec `ebpf:"xdp_bridge_in"`
	XdpUplinkIn *ebpf.ProgramSpec `ebpf:"xdp_uplink_in"`
}

// datapathMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type datapathMapSpecs struct {
	ArpTable   *ebpf.MapSpec `ebpf:"arp_table"`
	Fdb        *ebpf.MapSpec `ebpf:"fdb"`
	L3PortMap  *ebpf.MapSpec `ebpf:"l3_port_map"`
	NdEntryMap *ebpf.MapSpec `ebpf:"nd_entry_map"`
	NdTable    *ebpf.MapSpec `ebpf:"nd_table"`
	PortConfig *ebpf.MapSpec `ebpf:"port_config"`
	RouteTable *ebpf.MapSpec `ebpf:"route_table"`
	TxPort     *ebpf.MapSpec `ebpf:"tx_port"`
}

// datapathObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDatapathObjects or ebpf.CollectionSpec.LoadAndAssign.
type datapathObjects struct {
	datapathPrograms
	datapathMaps
}

func (o *datapathObjects) Close() error {
	return _DatapathClose(
		&o.datapathPrograms,
		&o.datapathMaps,
	)
}

// datapathMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDatapathObjects or ebpf.CollectionSpec.LoadAndAssign.
type datapathMaps struct {
	ArpTable   *ebpf.Map `ebpf:"arp_table"`
	Fdb        *ebpf.Map `ebpf:"fdb"`
	L3PortMap  *ebpf.Map `ebpf:"l3_port_map"`
	NdEntryMap *ebpf.Map `ebpf:"nd_entry_map"`
	NdTable    *ebpf.Map `ebpf:"nd_table"`
	PortConfig *ebpf.Map `ebpf:"port_config"`
	RouteTable *ebpf.Map `ebpf:"route_table"`
	TxPort     *ebpf.Map `ebpf:"tx_port"`
}

func (m *datapathMaps) Close() error {
	return _DatapathClose(
		m.ArpTable,
		m.Fdb,
		m.L3PortMap,
		m.NdEntryMap,
		m.NdTable,
		m.PortConfig,
		m.RouteTable,
		m.TxPort,
	)
}

// datapathPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDatapathObjects or ebpf.CollectionSpec.LoadAndAssign.
type datapathPrograms struct {
	XdpBridgeIn *ebpf.Program `ebpf:"xdp_bridge_in"`
	XdpUplinkIn *ebpf.Program `ebpf:"xdp_uplink_in"`
}

func (p *datapathPrograms) Close() error {
	return _DatapathClose(
		p.XdpBridgeIn,
		p.XdpUplinkIn,
	)
}

func _DatapathClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed datapath_bpfeb.o
var _DatapathBytes []byte
